console.log('Pie chart');

const margin = {t:50, r:50, b:50, l:50}

/*
 * Chart 1: this is an example showing you how to generate a simple pie chart
 *
 */

//Dummy data
const groups = [
	{id: 'foo', value: 56},
	{id: 'bar', value: 88},
	{id: 'baz', value: 130}
];

drawChart1(groups);

function drawChart1(data){

	const W = d3.select('#chart-1').node().clientWidth;
	const H = d3.select('#chart-1').node().clientHeight;
	const w = W - margin.l - margin.r;
	const h = H - margin.t - margin.b;

	//How big should the pie chart be? The radius should be half of either w or h, whichever is smaller
	const r = d3.min([w, h])/2; 

	//Pie function
	//Takes in an array of "slices", returns another array with angles etc., which lets you divide up the pie
	const pie = d3.pie()
		.value(function(d){ return d.value }) //we use the .value of each object to determine how big the slice

	const dataTransformed = pie(data);
	console.log(dataTransformed); //examine this in console

	//Arc function
	//Takes in an object generated by pie, and transforms it into "d" shape attribute for <path> elements
	const arc = d3.arc()
		.innerRadius(5)
		.outerRadius(r);

	//console.log(arc(dataTransformed[1])

	//DOM
	const plot1 = d3.select('#chart-1')
		.append('svg')
		.attr('width', W).attr('height', H)
		.append('g')
		.attr('transform', `translate(${W/2}, ${H/2})`) //note that we center this <g> element

	plot1.selectAll('.arc')
		.data(dataTransformed)
		.enter()
		.append('path')
		.attr('class', 'arc')
		.attr('d', function(datum){
			return arc(datum)
		})
		.style('fill', function(d, i){
			return `rgb(${i*100}, ${i*100}, ${i*100})`
		})

}


/*
 * Chart 2: can you replicate this by drawing a pie chart showing the number of permits by borough
 *
 * Note: I've already taken care of transforming the permits data into groups, and from groups into pie "slices"
 */

d3.csv('../../data/nyc_permits.csv', parse)
	.then(function(data){

		const groups = d3.nest()
			.key(function(d){ return d.borough })
			.entries(data);

		//Pie generator
		const pie = d3.pie()
			.value(function(d){ return d.values.length });
		const dataTransformed = pie(groups);
		console.log(dataTransformed);
    
    const W = d3.select('#chart-2').node().clientWidth;
	const H = d3.select('#chart-2').node().clientHeight;
	const w = W - margin.l - margin.r;
	const h = H - margin.t - margin.b;

    const r = d3.min([w, h])/2;
    const arc = d3.arc()
		.innerRadius(5)
		.outerRadius(r);

    const plot2 = d3.select('#chart-2')
		.append('svg')
		.attr('width', W).attr('height', H)
		.append('g')
		.attr('transform', `translate(${W/2}, ${H/2})`) 

	
	plot2.selectAll('.arc')
		.data(dataTransformed)
		.enter()
		.append('path')
		.attr('class', 'arc')
		.attr('d', function(datum){
			return arc(datum)
		})
		.style('fill', function(d, i){
			return `rgba(0,0,0, ${0.5+i*0.1})`
		})
    });


function parse(d){
	return {
		applicant_business_name:d.applicant_business_name,
		borough:d.borough,
		community_board:d.community_board,
		cost_estimate:+d.cost_estimate, //convert string to number
		enlargement:d.enlargement_flag_yes_no === "true"?true:false, //convert string to boolean
		address: `${d.job_location_house_number} ${d.job_location_street_name}`,
		job_number:+d.job_number,
		job_type:d.job_type,
		job_type2:d.job_type2,
		permit_type:d.permit_type,
		permit_issuance_date:new Date(d.permit_issuance_date),
		square_footage:+d.square_footage
	}
}


